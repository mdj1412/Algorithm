05. 알고리즘의 정당성 증명
    5.1 도입
        - 알고리즘의 정당성 증명
            : 알고리즘의 정확한 증명을 위해서는 각종 수학적인 기법이 동원되어야 한다.
                해결해야 할 문제가 간단할 때는 직관적으로 알고리즘을 설계할 수 있지만, 문제가 복잡해지면 이 알고리즘이 과연 문제를 제대로 해결하는지를 파악하기 조차 까다롭다.
                단위 테스트를 이용해 여러 개의 입력에 대해 프로그램을 실행해 보고 그 답을 점검해 볼 수도 있지만, 이런 식으로는 이 알고리즘이 존재 가능한 모든 입력에 대해 
                정확하게 동작한다는 사실을 증명할 수 없다. "단위 테스트는 알고리즘에 문제가 있음을 증명할 수는 있어도 문제가 없음을 증명할 수는 없기 때문이다." 
                따라서 알고리즘의 정확한 증명을 위해서는 각종 수학적인 기법이 동원되어야 한다.

            : 5장의 소개
                5장에서는 알고리즘의 증명을 위해 흔히 사용하는 기법들을 간략하게 다룬다. 수학 시간에 증명 문제 풀기를 싫어했던 분들은 이 장을 건너뛰고 싶은 욕구에 시달리겠지만, 
                이 장에서 다루는 기법들은 여러분이 작성하는 프로그램의 정당성을 평가하는 데도 유용하게 쓰이니만큼 꼭 읽도록하자.

            : 프로그래머들은 알고리즘의 증명을 소홀히함 (이러지말자)
                전세계 99%의 프로그래머는 알고맂므을 새로 만들기보다 배워서 써먹는 쪽에 지대한 관심을 가지고 있다. 그래서 대개 알고리즘의 증명에 관해서는 일찌감치 잊어버리는게
                어떨까 하는 유혹을 받기가 쉽다. 하지만, 알고리즘의 증명을 이해하지 않고서는 알고리즘을 제대로 공부했다고 할 수 없다.

            : 알고리즘의 증명을 공부해야하는 이유 1 -> 많은 경우 증명이 알고리즘을 유도하는 데 결정적인 통찰을 담고 있기 때문
                모든 알고리즘은 사실 치열한 고민과 개선 과정을 거쳐 태어난다. 이 과정에서 결정적으로 필요한 깨달음이 증명에 담겨 있는 경우가 많다. 
                따라서 의사 코드를 달달 외우기만 해서는 알고리즘에 담겨 있는 깨달음을 제대로 흠수했다고 볼 수 없으며, 
                증명을 이해하는 편이 알고리즘을 사용하는 입장에서도 더 큰 공부가 된다.

            : 알고리즘의 증명을 공부해야하는 이유 2 -> 다른 알고리즘들의 증명을 공부하다 보면 나중에 자신이 설계한 알고리즘의 정당성을 더 쉽게 증명할 수 있기 때문
                많은 증명을 직접 따라해 보면 처음 보는 알고리즘이 과연 잘 동작할지, 그리고 어떻게 그것을 증명해야 할지에 대해 어렴풋이 알 수 있는 직관 같은 것이 생기기 때문이다.
                이런 직관은 책이나 인터넷 없이 알고리즘을 설계하고 그것을 증명해야 하는 프로그래밍 대회 참가자에게 있어 비할 데 없이 귀중한 것이다.

            : 이 장에서는 알고리즘의 정당성 증명에서 흔히 나타나는 패턴들을 소개하고 몇 가지의 예제 증명들을 다룬다.
                여기서 다루게 될 패턴들은 이 책의 다른 알고리즘들을 증명하는 데도 이용되므로, 이 점을 염두에 두고 책을 읽어나가면 증명을 이해하는 데도 도움이 된다.
    

    5.2 수학적 귀납법과 반복문 불변식
        : 도미노 예시 + 수학적 귀납법 정의 + 증명 세 단계
            가정)   1. 첫 번째 도미노는 직접 손으로 밀어서 쓰러뜨린다.
                   2. 한 도미노가 쓰러지면 다음 도미노 역시 반드시 쓰러진다.
            그러면 마지막 도미노 또한 당연히 ㅆ러진다는 것을 직관적으로 알 수 있다.
            
            정의)   수학적 귀납법(mathematical induction)은 이와 같이 반복적인 구조를 갖는 명제들을 증명하는 데 유용하게 사용되는 증명 기법이다.

            귀납법 증명은 크게 세 단계로 나누어진다.
                1) 단게 나누기 - 증명하고 싶은 사실ㅇ르 여러 단계로 나눈다.
                    ex. 100개의 도미노를 도미노 하나씩으로 나누었다.
                2) 첫 단계 증명 - 그중 첫 단계에서 증명하고 싶은 내용이 성립함을 보이자.
                    ex. 첫 번째 도미노가 넘어짐을 증명하는 것이 이 과정
                3) 귀납 증명 - 한 단계에서 증명하고 싶은 내용이 성립한다면, 다음 단계에서도 성립함을 보인다.
                    ex. 한 도미노가 쓰러지면 다음 도미노는 반드시 쓰러짐을 보이는 것이 이 과정
        
        : 귀납법을 이용한 증명의 예 => 사다리 게임
            실제 귀납법을 이용한 증명의 예로 사다리 게임을 생각해 보자.
            사다리 게임을 하다 보면 맨 위 선택지와 맨 아래 선택지가 언제나 1:1 대응이 되는 것이 신기할 때가 있다. 
            귀납법을 이용하면 이 사실을 증명할 수 있다. (p.129 그림과 비교)

            1) 단계 나누기 - 텅 빈 N개의 의 세로줄에서부터 시작해서 원하는 사다리가 될 때까지 하나씩 가로 줄을 그어 간다고 하자. 이때 가로 줄을 하나 긋는 것을 한 단계라고 하자.
            2) 첫 단계 증명 - 텅 빈 N개의 세로줄에서는 항상 맨 위 선택지와 맨 아래 선택지가 1:1 대응이 된다.
            3) 귀납 증명 - 가로줄을 그어서 두 개의 세로줄을 연결한다고 하자. 이때 두 세로줄의 결과는 서로 뒤바뀐다. 두 세로줄의 결과가 뒤바뀌어도 1:1 대응은 변하지 않으므로
            다음 단계에서도 1:1 속성이 유지된다.
        
            따라서 귀납법에 의해 가로줄만을 사용하는 사다리들은 항상 1:1로 대응이 됨을 알 수 있다.


        - 반복문 불변식
            : "귀납법은 알고리즘의 정당성을 증명할 때 가장 유용하게 사용되는 기법"이다.
            왜냐면 "대부분의 알고리즘은 어떠한 형태로든 반복적인 요소를 가지고 있기 때문"이다. 귀납법은 이런 알고리즘들이 옳은 답을 계산함을 보이기 위해서 알고리즘의 각 단계가
            정답으로 가는 길 위에 있음을 보이고, 결과적으로 알고리즘의 답이 옳음을 보인다.

            : 반복문 불변식 ( loop invariant )
                귀납법을 이용해 알고리즘의 정당성을 증명할 때는 반복문 불변식(loop invariant)이라는 개념이 유용하게 쓰인다. 
                반복문 불변식이란 "반복문의 내용이 한 번 실행될 때마다 중간 결과가 우리가 원하는 답으로 가는 길 위에 잘 있는지를 명시하는 조건"이다.
                반복문이 마지막에 정담을 계산하기 위해서는 항상 이 식이 변하지 않고 성립해야 하는 것이죠.

            : 불변식을 이용하면 반복문의 정당성을 다음과 같이 "증명"할 수 있다.
                1. 반복문 진입시에 불변식이 성립함을 보이자.
                2. 반복문 내용이 불변식을 깨뜨리지 않음을 보인다. 다르게 말하면, 반복문 내용이 시작할 때 불변식이 성립했다면 내용이 끝날 때도 불변식이 항상 성립함을 보인다.
                3. 반복문 종료시에 불변식이 성립하면 항상 우리가 정답을 구했음을 보인다.

                1번과 2번 항목을 증명했다면 수학적 귀납법을 이용해 이들은 반복문이 종료할 때까지 항상 이 불변식이 성립함을 보일 수 있겠죠.
                예를 들어 while문에서 실제 불변식이 성립함을 보여야 하는 위치는 다음과 같다.
                    // (*) 불변식은 여기에서 성립해야 한다.
                    while (어떤 조건) {
                        // 반복문 내용의 시작
                        // 반복문 내용의 끝
                        // (**) 불변식은 여기에서도 성립해야 한다.
                    }
                
                내 생각) 3번 조건인 반복문 종료시 불변식이 성립되어 항상 정답이 됨을 보이자.


        
        - 이진 탐색과 반복문 불변식